import numpy as np
import matplotlib.pyplot as plt

# This model is only for N2 ionisation
print('Starting the code')
n0 = 1e19 # m-3
Te = 1000 # K
alpha = (1.8e-7 * (300/Te) ** 0.39 ) # cm-3
g = 9.81 # ms-2
k = 1.38e-23 # m2kgs-2K-18
sigma =  2.34e-22 # m2
C = 1/35 # eV-1
I_inf =  1e16#6.3e16 # eVm-2s-1
chi = 0
e = 1.6e-19 # C to keep B in Teslas
gamma_n = 1.76e-24 # cm3
B = 30e-6 # A/m
Mole_of_N2 = 0.02802 # kgmol-1
Mole_of_N = 0.01401 # kgmol-1

def mass(n):
    return n / (6.022e23) # returns kg

m = mass(Mole_of_N2)
h = 1000000

H = (m * g) / (k * Te) # m-1 ~30km
z = np.linspace(0, 500000, h+1)

def q(z):
    Q = C * sigma * n0 * I_inf * np.exp(-z*H - (sigma * (1/H) * n0 ) * np.exp(-z*H) / np.cos(chi))
    return Q * 1e-6

Q_max = (C * I_inf * np.cos(chi)) / ((1/H) * np.exp(1))
print('maximum photoionisation', Q_max * 1e-6)

neutrals = n0 * np.exp(-z * H)
ions = ((q(z))/alpha)**0.5

mi = mass(Mole_of_N)
print('maximum ion density', max(ions))

mu_in = ((m * mi) * 1e6) / ((m + mi) * 1e3) / ((1.67e-24)) # reduced mass of ion-neutral pair in atomic units but from grams
print('Reduced mass', mu_in)

ee = 4.803205e-10

nu_ion = 2.6e-9 * (neutrals * 1e-6) * np.sqrt(1.76 / mu_in)
nu_ions = 2.21 * np.pi * (neutrals * 1e-6) * ((m*1e3) /((mi + m)*1e3)) * np.sqrt((1.76 * (ee**2))/mu_in)

nu_en = 2.33e-11 * (neutrals) * (1 - (1.21e-4 * Te)) / Te
print('collision frequency', (nu_ions))
Omega_ci = np.zeros(len(z))
Omega_ce = np.zeros(len(z))
Omega_ci.fill(((e * B / mi))) 
Omega_ce.fill(((e * B) / 9.1e-31))
print('gyrofrequency', Omega_ci)
ion_p_contr = (1 / (mi * nu_ions)) * ((nu_ions ** 2) / ((nu_ions ** 2) + (Omega_ci ** 2)))
electron_p_contr = (1 / ((9.1e-31) * nu_en)) * ((nu_en ** 2) / ((nu_en ** 2) + (Omega_ce ** 2)))

pedersen = ions * (e ** 2) * (ion_p_contr + electron_p_contr) / 1e-6 # conductivity is in m-3 not cm-3 so had to adjust for that
print(max(pedersen))

sigma_h = (ions * e ** 2) *(-((1 / (mi * nu_ions)) * ((nu_ions * Omega_ci) / ((nu_ions ** 2) + (Omega_ci ** 2)))) + ((1 / ((9.1e-31) * nu_en)) * ((nu_en * Omega_ce) / ((nu_en ** 2) + (Omega_ce ** 2))))) / 1e-6

# conductance Sigma_p

con = sum(pedersen * (z[1] - z[0]))
print(con)

figure, axs = plt.subplots(1, 3, sharey='row', figsize=(10, 5))

axs[0].semilogx(neutrals * 1e-6, z*1e-3)
axs[0].set_xlabel(r'Neutral number density, $cm^{-3}$', fontsize=7)
axs[0].set_title('Neutral number density variation with altitude', fontsize=7)
axs[1].semilogx(q(z), z*1e-3)
axs[1].set_xlabel(r'Photoionization rate, $cm^{-3}s^{-1}$', fontsize=7)
axs[1].set_title('Photoionization variation with altitude', fontsize=7)
axs[1].set_xlim(10)
axs[2].semilogx(ions, z*1e-3)
axs[2].set_xlabel(r'Ion number density, $cm^{-3}$', fontsize=7)
axs[2].set_title('Ion density variation with altitude', fontsize=7)
axs[2].set_xlim(1e2)
plt.ylabel(r'Reduced Height, km', fontsize=7)
plt.tight_layout()

figure, axs = plt.subplots(1, 2, figsize=(10, 5), sharey='row')

axs[0].semilogx(Omega_ci, z * 1e-3, color='black', label=r'$\Omega_{ci}$')
axs[0].semilogx(nu_ion, z * 1e-3, color='navy', label=r'$\nu_{in}$ from email')
axs[0].semilogx(nu_en, z * 1e-3, color='darkseagreen', label=r'$\nu_{en}$')
axs[0].semilogx(nu_ions, z * 1e-3, color='plum', label=r'$\nu_{in}$')
axs[0].set_xlabel(r'log frequency, $s^{-1}$')
axs[0].legend()
axs[1].semilogx(pedersen, z * 1e-3, color='purple', label=r'$\sigma_{p}$')
axs[1].set_xlabel(r'Conductivity, $\Omega^{-1}m^{-3}$')
axs[1].plot(sigma_h, z * 1e-3, color='deeppink', label=r'$\sigma_{h}$')
axs[1].legend()
plt.ylabel('altitude, km')
plt.show()
